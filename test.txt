

11.6챕터 보면됨 qhrtmqwnd

serializers.py 예시
from rest_framework import serializers
from .models import Category


class CategorySerializer(serializers.ModelSerializer):
    # ModelSerializer 활용시 serializers에서 수동으로 설정하던 create update를 알아서 설정해줌 모델설정을 상속받아와서 하는 방식
    class Meta:
        model = Category
        # 보여줄 필드 설정
        # fields = ("name", "kind")
        # exclude = () 안에 들어가는 필드를 제외하고 다보여줌
        fields = "__all__"  # 모든 필드를 다보고싶을떄

    # serializers 사용방식
    # pk = serializers.IntegerField(read_only=True)
    # name = serializers.CharField(
    #     required=True,
    #     max_length=50,
    # )
    # kind = serializers.ChoiceField(
    #     choices=Category.CategoryKindChoices.choices,
    # )
    # created_at = serializers.DateTimeField(read_only=True)

    # def create(self, validated_data):
    #     return Category.objects.create(**validated_data)

    # def update(self, instance, validated_data):
    #     instance.name = validated_data.get("name", instance.name)
    #     instance.kind = validated_data.get("kind", instance.kind)
    #     instance.save()
    #     return instance
-----------------------------------------------------------------------
urls.py 예시

from django.urls import path
from . import views

urlpatterns = [
    # CategoryViewSet 사용시 action을 명시해주면 자동으로 처리해줌
    path(
        "",
        views.CategoryViewSet.as_view(
            {
                "get": "list",
                "post": "create",
            }
        ),
    ),
    path(
        "<int:pk>",
        views.CategoryViewSet.as_view(
            {
                "get": "retrieve",
                "put": "partial_update",
                "delete": "destroy",
            }
        ),
    ),
]
----------------------------------------------------------------------

views.py 예시

from django.shortcuts import render
from .models import Category

from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.exceptions import NotFound
from rest_framework.status import HTTP_204_NO_CONTENT
from rest_framework.views import APIView
from rest_framework.viewsets import ModelViewSet
from .serializers import CategorySerializer


class CategoryViewSet(ModelViewSet):

    serializer_class = CategorySerializer
    queryset = Category.objects.all()


# 위코드가 밑에코드들을 전부 대체해줌

# APIView
# class Categories(APIView):
#     def get(self, request):
#         all_categories = Category.objects.all()
#         serializer = CategorySerializer(all_categories, many=True)
#         return Response(serializer.data)

#     def post(self, request):
#         serializer = CategorySerializer(data=request.data)
#         if serializer.is_valid():
#             new_category = serializer.save()
#             return Response(
#                 CategorySerializer(new_category).data,
#             )
#         else:
#             return Response(serializer.errors)


# 예전 방식
# @api_view(["GET", "POST"])
# def categories(request):
#     if request.method == "GET":
#         all_categories = Category.objects.all()
#         serializer = CategorySerializer(all_categories, many=True)
#         return Response(serializer.data)
#     elif request.method == "POST":
#         # print(request.data)
#         # Category.objects.create(
#         #     name=request.data["name"],
#         #     kind=request.data["kind"],
#         # )
#         serializer = CategorySerializer(data=request.data)
#         if serializer.is_valid():
#             new_category = serializer.save()
#             return Response(CategorySerializer(new_category).data)
#         else:
#             return Response(serializer.errors)

# APIView
# class CategoryDetail(APIView):
#     def get_object(self, pk):
#         try:
#             return Category.objects.get(pk=pk)
#         except Category.DoesNotExist:
#             raise NotFound

#     def get(self, request, pk):
#         serialilzer = CategorySerializer(self.get_object(pk))
#         return Response(serialilzer.data)

#     def put(self, request, pk):
#         serialilzer = CategorySerializer(
#             self.get_object(pk),
#             data=request.data,
#             partial=True,
#         )
#         if serialilzer.is_valid():
#             updated_category = serialilzer.save()
#             return Response(CategorySerializer(updated_category).data)
#         else:
#             return Response(serialilzer.errors)

#     def delete(self, request, pk):
#         self.get_object(pk).delete()
#         return Response(status=HTTP_204_NO_CONTENT)


# @api_view(["GET", "PUT", "DELETE"])
# def category(request, pk):
#     try:
#         category = Category.objects.get(pk=pk)
#     except Category.DoesNotExist:
#         raise NotFound
#     if request.method == "GET":
#         serialilzer = CategorySerializer(category)
#         return Response(serialilzer.data)
#     elif request.method == "PUT":
#         serialilzer = CategorySerializer(
#             category,
#             data=request.data,
#             partial=True,
#         )
#         if serialilzer.is_valid():
#             updated_category = serialilzer.save()
#             return Response(CategorySerializer(updated_category).data)
#         else:
#             return Response(serialilzer.errors)
#     elif request.method == "DELETE":
#         category.delete()
#         return Response(status=HTTP_204_NO_CONTENT)
---------------------------------------------------------------------
Rooms 에서 만들어야할 것들 
GET POST / rooms
GET PUT DELETE / roomx/1
GET /rooms/1/amenities
GET /rooms/1/reviews
GET POST /amenities [X]
GET POST DELETE /amenities/1 [x]
GET POST /rooms/1/bookings
GET PUT DELETE /rooms/1/bookings/2

create_room test 용 
"name": "House created with DRF",
"country": "한국",
"city": "서울",
"price": 1000,
"rooms": 2,
"toilets": 2,
"category" : {
    "name":"lalo","kind":"rooms"
},
"amenity":[{"name":"laalaala","description":"laalaala"}],
"description": "DRF is great",
"address": "123",
"pet_friendly": true,
"kind": "entire_place"